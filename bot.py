import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "8081060276:AAER7c-zg47MsVVGJM-ZqnNl_CIUQ3_JN88"
CHANNEL_ID = "-1003016125655"  # –í–∞—à –∫–∞–Ω–∞–ª

# –í–∞—à–∏ –≥–∞–π–¥—ã
GUIDES = {
    "stress": "https://docs.google.com/document/d/1CTjVagsMdjiCUng9jFgyOW9qnahrFqDAQs752",
    "sleep": "https://drive.google.com/–≤–∞—à–∞-—Å—Å—ã–ª–∫–∞-–Ω–∞-–≥–∞–π–¥-2", 
    "anxiety": "https://drive.google.com/–≤–∞—à–∞-—Å—Å—ã–ª–∫–∞-–Ω–∞-–≥–∞–π–¥-3"
}

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≥–∞–π–¥–∞–º–∏
def guides_keyboard():
    buttons = []
    for guide_name in GUIDES:
        # –ö—Ä–∞—Å–∏–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
        pretty_names = {
            "stress": "üßò‚Äç‚ôÄÔ∏è –ì–∞–π–¥ –ø–æ —Å—Ç—Ä–µ—Å—Å—É",
            "sleep": "üò¥ –ì–∞–π–¥ –ø–æ —Å–Ω—É", 
            "anxiety": "üò∞ –ì–∞–π–¥ –ø–æ —Ç—Ä–µ–≤–æ–≥–µ"
        }
        buttons.append(InlineKeyboardButton(
            text=pretty_names[guide_name], 
            callback_data=f"guide_{guide_name}"
        ))
    return InlineKeyboardMarkup(resize_keyboard=True).add(*buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def check_subscription_keyboard(guide_name):
    return InlineKeyboardMarkup(resize_keyboard=True).add(
        InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"check_{guide_name}"),
        InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID[1:]}")
    )

# –®–∞–≥ 1. –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≥–∞–π–¥–æ–≤.\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –≥–∞–π–¥ –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:',
        reply_markup=guides_keyboard()
    )

# –®–∞–≥ 2. –í—ã–±–æ—Ä –≥–∞–π–¥–∞
@dp.callback_query_handler(lambda c: c.data.startswith('guide_'))
async def choose_guide(callback: types.CallbackQuery):
    guide_name = callback.data.replace('guide_', '')
    
    # –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    user_id = callback.from_user.id
    is_subscribed = await check_subscription(user_id)
    
    if is_subscribed:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω - —Å—Ä–∞–∑—É –¥–∞–µ–º –≥–∞–π–¥
        guide_url = GUIDES[guide_name]
        await callback.message.edit_text(
            f'üéâ –í–æ—Ç –≤–∞—à –≥–∞–π–¥!\n\n'
            f'üìö {guide_url}\n\n'
            '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è! üí´',
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üìñ –û—Ç–∫—Ä—ã—Ç—å –≥–∞–π–¥", url=guide_url)
            )
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        guide_title = {
            "stress": "üßò‚Äç‚ôÄÔ∏è –ì–∞–π–¥ –ø–æ –±–æ—Ä—å–±–µ —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º",
            "sleep": "üò¥ –ì–∞–π–¥ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–Ω–∞",
            "anxiety": "üò∞ –ì–∞–π–¥ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é —Ç—Ä–µ–≤–æ–≥–∏"
        }
        
        await callback.message.edit_text(
            f'‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∞–π–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!\n\n'
            f'üìö {guide_title[guide_name]}\n\n'
            '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":',
            reply_markup=check_subscription_keyboard(guide_name)
        )

# –®–∞–≥ 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith('check_'))
async def check_subscription_handler(callback: types.CallbackQuery):
    guide_name = callback.data.replace('check_', '')
    user_id = callback.from_user.id
    
    is_subscribed = await check_subscription(user_id)
    
    if is_subscribed:
        # –ü–æ–¥–ø–∏—Å–∞–Ω - –≤—ã–¥–∞–µ–º –≥–∞–π–¥
        guide_url = GUIDES[guide_name]
        await callback.message.edit_text(
            f'‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!\n\n'
            f'üéâ –í–æ—Ç –≤–∞—à –≥–∞–π–¥:\n{guide_url}\n\n'
            '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è! üìñ',
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üìñ –û—Ç–∫—Ä—ã—Ç—å –≥–∞–π–¥", url=guide_url)
            )
        )
    else:
        # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        await callback.answer(
            '‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', 
            show_alert=True
        )

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id):
    try:
        chat_member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except:
        return False

if __name__ == "__main__":
    executor.start_polling(dispatcher=dp, skip_updates=True)

